// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by lister-gen. DO NOT EDIT.

package v0alpha1

import (
	v0alpha1 "github.com/grafana/grafana/pkg/apis/alerting/notifications/timeinterval/v0alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TimeIntervalListLister helps list TimeIntervalLists.
// All objects returned here must be treated as read-only.
type TimeIntervalListLister interface {
	// List lists all TimeIntervalLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v0alpha1.TimeIntervalList, err error)
	// TimeIntervalLists returns an object that can list and get TimeIntervalLists.
	TimeIntervalLists(namespace string) TimeIntervalListNamespaceLister
	TimeIntervalListListerExpansion
}

// timeIntervalListLister implements the TimeIntervalListLister interface.
type timeIntervalListLister struct {
	indexer cache.Indexer
}

// NewTimeIntervalListLister returns a new TimeIntervalListLister.
func NewTimeIntervalListLister(indexer cache.Indexer) TimeIntervalListLister {
	return &timeIntervalListLister{indexer: indexer}
}

// List lists all TimeIntervalLists in the indexer.
func (s *timeIntervalListLister) List(selector labels.Selector) (ret []*v0alpha1.TimeIntervalList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v0alpha1.TimeIntervalList))
	})
	return ret, err
}

// TimeIntervalLists returns an object that can list and get TimeIntervalLists.
func (s *timeIntervalListLister) TimeIntervalLists(namespace string) TimeIntervalListNamespaceLister {
	return timeIntervalListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TimeIntervalListNamespaceLister helps list and get TimeIntervalLists.
// All objects returned here must be treated as read-only.
type TimeIntervalListNamespaceLister interface {
	// List lists all TimeIntervalLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v0alpha1.TimeIntervalList, err error)
	// Get retrieves the TimeIntervalList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v0alpha1.TimeIntervalList, error)
	TimeIntervalListNamespaceListerExpansion
}

// timeIntervalListNamespaceLister implements the TimeIntervalListNamespaceLister
// interface.
type timeIntervalListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TimeIntervalLists in the indexer for a given namespace.
func (s timeIntervalListNamespaceLister) List(selector labels.Selector) (ret []*v0alpha1.TimeIntervalList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v0alpha1.TimeIntervalList))
	})
	return ret, err
}

// Get retrieves the TimeIntervalList from the indexer for a given namespace and name.
func (s timeIntervalListNamespaceLister) Get(name string) (*v0alpha1.TimeIntervalList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v0alpha1.Resource("timeintervallist"), name)
	}
	return obj.(*v0alpha1.TimeIntervalList), nil
}
