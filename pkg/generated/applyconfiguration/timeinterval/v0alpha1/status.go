// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v0alpha1

// StatusApplyConfiguration represents an declarative configuration of the Status type for use
// with apply.
type StatusApplyConfiguration struct {
	AdditionalFields map[string]string                                `json:"additionalFields,omitempty"`
	OperatorStates   map[string]StatusOperatorStateApplyConfiguration `json:"operatorStates,omitempty"`
}

// StatusApplyConfiguration constructs an declarative configuration of the Status type for use with
// apply.
func Status() *StatusApplyConfiguration {
	return &StatusApplyConfiguration{}
}

// WithAdditionalFields puts the entries into the AdditionalFields field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the AdditionalFields field,
// overwriting an existing map entries in AdditionalFields field with the same key.
func (b *StatusApplyConfiguration) WithAdditionalFields(entries map[string]string) *StatusApplyConfiguration {
	if b.AdditionalFields == nil && len(entries) > 0 {
		b.AdditionalFields = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.AdditionalFields[k] = v
	}
	return b
}

// WithOperatorStates puts the entries into the OperatorStates field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the OperatorStates field,
// overwriting an existing map entries in OperatorStates field with the same key.
func (b *StatusApplyConfiguration) WithOperatorStates(entries map[string]StatusOperatorStateApplyConfiguration) *StatusApplyConfiguration {
	if b.OperatorStates == nil && len(entries) > 0 {
		b.OperatorStates = make(map[string]StatusOperatorStateApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.OperatorStates[k] = v
	}
	return b
}
